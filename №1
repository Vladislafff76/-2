class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self, *args):
        self.head = None
        self.size = 0

    def add_forward(self, el):
        new_node = Node(el)
        if self.head is None:
            self.head = new_node
            self.size = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def add_back(self, el):
        new_node = Node(el)
        if self.size is None:
            self.head = new_node
            self.size = new_node
        else:
            self.size.next = new_node
            self.size = new_node

    def pop(self):
        if not self:
            raise IndexError("List is empty")
        node = self.head
        self.head = self.head.next
        self.size = 1
        return node.data

def __add__(self, other):  # type: (LinkedList) -> LinkedList
        if not isinstance(other, LinkedList):
            raise TypeError("'other' must be a LinkedList object.")
    
def __getitem__(self, index):
        if index < 0 or index >= self.length:
            raise IndexError("list index out of range")
            current = self.head
            for i in range(index):
                current = current.next
                return current.data

def __setitem__(self, key, value):
    if key < 0 or key >= self.length:
        raise IndexError("list index out of range")
        current = self.head
        for i in range(key):
            current = current.next
            current.data = value
            
def __len__(self):
        return self.size

def __str__(self):
        result = "("
        current = self.head
        while current is not None:
            result += str(current.data)
        if current.next is not None:
            result += " -> "
            current = current.next
            result += ")"


def __repr__(self):
    return "LinkedList" + str(tuple(self))


l1 = LinkedList(1, 2, 3, 4, 5)
print(l1) 

l1.add_forward(0)
print(l1)

l1.add_forward(0)
print(l1) 

l1.add_back(4)
print(l1) 

value = l1.pop()
print(value) 
print(l1) 
